#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <string.h>

const int VALEUR_MIN = 'A', VALEUR_MAX = 'Z';
#define LEN(arr) ((int) (sizeof (arr) / sizeof (arr)[0]))


char to_uppercase ( char c ){
    char upper = '0';
    int ascc = (int)c;
    if ( 97 <= ascc <= 122 ){upper = (char)ascc-32;}
    else if( 65 <= ascc <= 90  ){puts("\nLa lettre est déjà en majuscules\n");}
    else{ puts("\nCe n'est pas une lettre\n");}
    return upper;
}


//Correction projet 1 partie 3

#ifndef MATRICE_GENERIQUE_H
#define MATRICE_GENERIQUE_H
 
//énumération des types de coefficients supportés par mon appli
typedef enum{
    TYPE_UINT8,
    TYPE_INT8,
    TYPE_INT,
    TYPE_FLOAT,
}coeff_type;
 
//structure de la matrice générique
typedef struct {
    unsigned int nb_lig;
    unsigned int nb_col;
    coeff_type type; //type des coefficients de ma matrice générique 
    void** coeffs; //tableau de coefficients génériques
}matrice_gen_t;
 
size_t coeff_matrice_gen_size(coeff_type type);
matrice_gen_t* allouer_matrice_gen( unsigned int lig, unsigned int col, coeff_type type);
void desallouer_matrice_gen(matrice_gen_t* * m);
 
#endif


// Projet 1


size_t coeff_matrice_gen_size(coeff_type type)
{   
    switch(type)
    {
        case TYPE_UINT8  :  return sizeof(unsigned char);
                            break;
        case TYPE_INT8   :  return sizeof(char);
                            break;
        case TYPE_INT   :   return sizeof(int);
                            break;
        case TYPE_FLOAT  :  return sizeof(float);
                            break;
        default :
            fprintf(stderr, "ERREUR type non supporte...\n");
            exit(EXIT_FAILURE);
    }
}

matrice_gen_t* allouer_matrice_gen( unsigned int lig, unsigned int col, coeff_type type)
{
    matrice_gen_t* m = (matrice_gen_t*)malloc(sizeof(matrice_gen_t));
    //Normalement on doit vérifier si m != NULL !
    m->nb_lig = lig;
	m->nb_col = col;
	m->type = type;
    m->coeffs = (void**)malloc( (m->nb_lig)*sizeof(void*) );
    //Normalement on doit vérifier si m->coeffs != NULL !
    for(unsigned int i = 0; i < m->nb_lig; i++)
    {
        m->coeffs[i] = (void*)malloc( (m->nb_col) * coeff_matrice_gen_size(m->type) );
        //tester si le pointeur renvoyé est != NULL
    }
 
    return m;
}
 
void desallouer_matrice_gen(matrice_gen_t* * m){
    for(unsigned int i = 0 ; i < (*m)->nb_lig ; i++ ) {
		free( (*m)->coeffs[i] );
	}
	free( (*m)->coeffs );
	free( *m );
	*m = NULL;
	return;
}